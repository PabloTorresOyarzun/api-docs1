# docker-compose.yml - Configuración para producción (SSL comentado)

services:
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"  # Solo bind local
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  api:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs:rw
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      replicas: 2  # Para alta disponibilidad

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    working_dir: /app
    environment:
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs:rw
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      redis:
        condition: service_healthy
    command: celery -A app.tasks.celery_tasks:celery_app worker --loglevel=warning --concurrency=4
    healthcheck:
      test: ["CMD", "celery", "-A", "app.tasks.celery_tasks:celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    working_dir: /app
    environment:
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs:rw
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      redis:
        condition: service_healthy
    command: celery -A app.tasks.celery_tasks:celery_app beat --loglevel=warning
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # Let's Encrypt - Obtención inicial de certificado (COMENTADO)
  # certbot-init:
  #   image: certbot/certbot
  #   volumes:
  #     - ./certbot/conf:/etc/letsencrypt
  #     - ./certbot/www:/var/www/certbot
  #   environment:
  #     - DOMAIN=${DOMAIN:-tu-dominio.com}
  #     - EMAIL=${EMAIL:-tu@email.com}
  #   command: /bin/sh -c "if [ ! -f /etc/letsencrypt/live/$${DOMAIN}/fullchain.pem ]; then echo 'Obteniendo certificado SSL inicial para $${DOMAIN}...'; certbot certonly --webroot --webroot-path=/var/www/certbot --email $${EMAIL} --agree-tos --no-eff-email -d $${DOMAIN} --non-interactive; echo 'Certificado SSL obtenido exitosamente'; else echo 'Certificado SSL ya existe para $${DOMAIN}'; fi"

  # Let's Encrypt - Renovación automática (COMENTADO)
  # certbot:
  #   image: certbot/certbot
  #   restart: unless-stopped
  #   volumes:
  #     - ./certbot/conf:/etc/letsencrypt
  #     - ./certbot/www:/var/www/certbot
  #   depends_on:
  #     - certbot-init
  #   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --quiet; sleep 12h & wait $$!; done;'"

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      # - "443:443"  # Puerto HTTPS comentado hasta tener SSL
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # - ./certbot/conf:/etc/letsencrypt  # Certificados comentados
      # - ./certbot/www:/var/www/certbot   # Challenge files comentados
      - ./logs:/var/log/nginx:rw
    depends_on:
      api:
        condition: service_healthy
      # certbot-init:  # Dependencia SSL comentada
      #   condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
    # command: "/bin/sh -c 'while :; do sleep 6h & wait $$!; nginx -s reload; done & nginx -g \"daemon off;\"'"  # Reload SSL comentado

  # Monitor opcional con Prometheus (comentado)
  # prometheus:
  #   image: prom/prometheus:latest
  #   restart: unless-stopped
  #   ports:
  #     - "127.0.0.1:9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  # prometheus_data:
  #   driver: local